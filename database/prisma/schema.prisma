generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["relationJoins", "driverAdapters"]
}

generator fabbrica {
  provider = "prisma-fabbrica"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Service Models
model User {
  id                Int     @id @default(autoincrement())
  name              String
  email             String 
  temporaryPassword String?
  cognitoId         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  onboardings       Onboarding[]
  accounts          Account[]
  insights          Insight[]

  @@unique([email])
  @@map("users")
}

model Onboarding {
  id            String @id @default(uuid())
  userId        Int?
  data          Json @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User? @relation(fields: [userId], references: [id])
  
  @@map("onboardings")
}

enum SourceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SourceType {
  NUBANK_ACCOUNT_CSV
  NUBANK_CREDIT_CARD_CSV
}

model Bank {
  number String    @id
  name   String

  accounts Account[]

  @@index([number])
  @@map("banks")
}

model Account {
  id          String   @id @default(uuid())
  bankNumber  String
  userId      Int
  name        String
  color       String
  sourceType  SourceType @default(NUBANK_CREDIT_CARD_CSV)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bank            Bank         @relation(fields: [bankNumber], references: [number])
  user            User         @relation(fields: [userId], references: [id])
  transactions    Transaction[]
  sources         Source[]
  categoryRules   CategoryRule[]


  @@index([userId])
  @@index([bankNumber])
  @@map("accounts")
}

model Category {
  id               String     @id @default(uuid())
  name             String     @unique
  color            String

  transactions Transaction[]
  categoryRules CategoryRule[]
  @@map("categories")
}

model Source {
  id        String       @id @default(uuid())
  accountId String
  type      SourceType
  status    SourceStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  error     String?

  account      Account      @relation(fields: [accountId], references: [id])
  transactions Transaction[]

  @@index([accountId])
  @@map("sources")
}

model Transaction {
  id              String   @id @default(uuid())
  sourceId        String
  accountId       String
  checksum        String  @unique
  categoryId      String?
  categoryRuleId  String?
  categoryScore   Float?
  date            DateTime
  description     String
  amount          Float 
  notes           String?
  isHidden        Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  source    Source    @relation(fields: [sourceId], references: [id])
  account   Account   @relation(fields: [accountId], references: [id])
  category  Category? @relation(fields: [categoryId], references: [id])
  categoryRule CategoryRule? @relation(fields: [categoryRuleId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@index([categoryRuleId])
  @@map("transactions")
}

model CategoryRule {
  id          String   @id @default(uuid())
  keyword     String    @db.VarChar(1024)
  categoryId  String  
  accountId   String?
  priority    Int @default(1)
  ocurrences  Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category    @relation(fields: [categoryId], references: [id])
  account     Account?    @relation(fields: [accountId], references: [id])
  transactions Transaction[]

  @@index([categoryId])
  @@index([accountId])
  @@index([keyword, accountId])
  @@unique([keyword, accountId, categoryId])
  @@index(fields: [keyword(ops: raw("gin_trgm_ops"))], type: Gin)

  @@map("category_rules")
}

model Insight {
  id String @id @default(uuid())
  userId Int
  identifier String @unique
  config Json
  text String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("insights")
}