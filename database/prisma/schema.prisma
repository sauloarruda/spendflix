generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x" , "rhel-openssl-1.0.x"]
}

generator fabbrica {
  provider = "prisma-fabbrica"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Service Models
model User {
  id                Int     @id @default(autoincrement())
  name              String
  email             String 
  temporaryPassword String?
  cognitoId         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  onboardings       Onboarding[]
  accounts          Account[]

  @@unique([email])
  @@map("users")
}

model Onboarding {
  id            String @id @default(uuid())
  userId        Int?
  data          Json @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User? @relation(fields: [userId], references: [id])
  
  @@map("onboardings")
}

enum SourceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SourceType {
  NUBANK_ACCOUNT_CSV
  NUBANK_CREDIT_CARD_CSV
}

model Bank {
  number String    @id
  name   String

  accounts Account[]

  @@index([number])
  @@map("banks")
}

model Account {
  id        String   @id @default(uuid())
  bankNumber    String
  userId    Int
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bank         Bank         @relation(fields: [bankNumber], references: [number])
  user         User         @relation(fields: [userId], references: [id])
  transactions Transaction[]
  sources      Source[]

  @@index([userId])
  @@index([bankNumber])
  @@map("accounts")
}

model Category {
  id               String     @id @default(uuid())
  name             String
  parentCategoryId String?
  color            String

  parent   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  transactions Transaction[]

  @@index([parentCategoryId])
  @@map("categories")
}

model Source {
  id        String       @id @default(uuid())
  accountId String
  type      SourceType
  status    SourceStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  error     String?

  account      Account      @relation(fields: [accountId], references: [id])
  transactions Transaction[]

  @@index([accountId])
  @@map("sources")
}

model Transaction {
  id          String   @id @default(uuid())
  sourceId    String
  accountId   String
  categoryId  String?
  date        DateTime
  description String
  amount      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  source    Source    @relation(fields: [sourceId], references: [id])
  account   Account   @relation(fields: [accountId], references: [id])
  category  Category? @relation(fields: [categoryId], references: [id])

  @@index([accountId])
  @@index([categoryId])
  @@map("transactions")
} 